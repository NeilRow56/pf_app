// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid()) @map("_id") @db.String
  email        String
  firstName    String
  lastName     String
  profileImage String?
  clients      Client[]
  bankAccounts BankAccount[]
  category     Category[]
  transaction  Transaction[]
  createdAt DateTime @default(now())
}

model Client {
  id           String @id @default(cuid()) @map("_id") @db.String
  name         String
  category     ClientCategory 
  status       ClientStatus
  workSuspended      Boolean       @default(false)
  User         User   @relation(fields: [userId], references: [id])
  userId       String @db.String
  createdAt DateTime @default(now())
}

model BankAccount {
  id            String @id @default(cuid()) @map("_id") @db.String
  accountNumber String
  balance       Int
  user          User          @relation(fields: [userId], references: [id])
  userId        String @db.String
  transaction   Transaction[]

  @@unique([accountNumber, userId])
}

model Category {
  id          String @id @default(cuid()) @map("_id") @db.String
  name        String
  type        String
  icon        String
  iconColor   String
  user        User          @relation(fields: [userId], references: [id])
  userId      String @db.String
  transaction Transaction[]

 @@unique([name, type, userId])
}

model Transaction {
  id            String @id @default(cuid()) @map("_id") @db.String
  date          DateTime
  amount        Int
  note          String?
  recipient     String?
  user          User        @relation(fields: [userId], references: [id])
  userId        String @db.String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId String @db.String
  category      Category?   @relation(fields: [categoryId], references: [id])
  categoryId    String @db.String
}

enum ClientCategory {
  limited_company
  partnership
  sole_trader
  charity
  other
}

enum ClientStatus {
  awaiting_ml_checks
  active
  archived
}